Index: app/src/main/java/ru/practicum/android/diploma/presentation/viewmodel/FilterViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ru.practicum.android.diploma.presentation.viewmodel\r\n\r\nimport androidx.lifecycle.LiveData\r\nimport androidx.lifecycle.MutableLiveData\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.viewModelScope\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.launch\r\nimport ru.practicum.android.diploma.domain.filters.FilterInteractor\r\nimport ru.practicum.android.diploma.domain.models.AreaFilterModel\r\nimport ru.practicum.android.diploma.domain.models.CityModel\r\nimport ru.practicum.android.diploma.domain.models.CountryModel\r\nimport ru.practicum.android.diploma.domain.models.FilterModel\r\nimport ru.practicum.android.diploma.domain.models.IndustriesFilterModel\r\nimport ru.practicum.android.diploma.domain.models.IndustryModel\r\nimport ru.practicum.android.diploma.domain.models.RegionModel\r\nimport ru.practicum.android.diploma.domain.models.Resource\r\nimport ru.practicum.android.diploma.presentation.mapper.MapperFilter\r\nimport ru.practicum.android.diploma.presentation.models.AreasScreenState\r\nimport ru.practicum.android.diploma.presentation.models.IndustryScreenState\r\nimport ru.practicum.android.diploma.presentation.models.RegionScreenState\r\n\r\nclass FilterViewModel(\r\n    private val filterInteractor: FilterInteractor,\r\n    private val mapperFilter: MapperFilter,\r\n) : ViewModel() {\r\n    private var _areaLiveData = MutableLiveData<AreasScreenState>()\r\n    val areaLiveData: LiveData<AreasScreenState> get() = _areaLiveData\r\n    private var _regionsLiveData = MutableLiveData<RegionScreenState>()\r\n    val regionsLiveData: LiveData<RegionScreenState> get() = _regionsLiveData\r\n    private var _cityLiveData = MutableLiveData<List<CityModel>>()\r\n    val cityLiveData: LiveData<List<CityModel>> get() = _cityLiveData\r\n    private var _selectIndustryLiveData = MutableLiveData<IndustryModel?>()\r\n    val selectIndustryLiveData: LiveData<IndustryModel?> get() = _selectIndustryLiveData\r\n    private var _industryLiveData = MutableLiveData<IndustryScreenState>()\r\n    val industryLiveData: LiveData<IndustryScreenState> get() = _industryLiveData\r\n    private var _searchFilterLiveData = MutableLiveData<FilterModel?>()\r\n    val searchFilterLiveData: LiveData<FilterModel?> get() = _searchFilterLiveData\r\n    private var selectRegionLiveData = MutableLiveData<RegionModel?>()\r\n    fun getSelectRegionLiveData(): LiveData<RegionModel?> = selectRegionLiveData\r\n    private var selectCountryLiveData = MutableLiveData<CountryModel?>()\r\n    fun getSelectCountryLiveData(): LiveData<CountryModel?> = selectCountryLiveData\r\n    private var selectCityLiveData = MutableLiveData<CityModel?>()\r\n    fun getSelectCityLiveData(): LiveData<CityModel?> = selectCityLiveData\r\n    private var areaList = listOf<CountryModel>()\r\n    private var regionsList = listOf<RegionModel>()\r\n    private var cityList = listOf<CityModel>()\r\n    private var industryList = listOf<IndustryModel>()\r\n\r\n    var filterModel: FilterModel? = null\r\n    var isHaveSaveFilter: Boolean = false\r\n\r\n    private var salaryBase: Int? = null\r\n    private var doNotShowWithoutSalary: Boolean = false\r\n    fun setDontShowWithoutSalary(show: Boolean) {\r\n        doNotShowWithoutSalary = show\r\n        saveCheckSalary(show)\r\n    }\r\n    fun setSalary(salary: String) {\r\n        if (salary.isEmpty()) {\r\n            salaryBase = null\r\n        } else {\r\n            salaryBase = salary.toInt()\r\n            if (salaryBase!! == 0) salaryBase = null\r\n        }\r\n        saveSalary()\r\n    }\r\n\r\n    fun saveSalary() {\r\n        viewModelScope.launch {\r\n            filterInteractor.saveSalary(salaryBase)\r\n        }\r\n    }\r\n    private fun setCountryModel(model: CountryModel?) {\r\n        selectCountryLiveData.postValue(model)\r\n    }\r\n    fun setRegionModel(model: RegionModel?) {\r\n        selectRegionLiveData.postValue(model)\r\n    }\r\n    private fun setCityModel(model: CityModel?) {\r\n        selectCityLiveData.postValue(model)\r\n    }\r\n\r\n    fun saveArea() {\r\n        var area: AreaFilterModel? = null\r\n        val country = if (selectCountryLiveData.value != null) {\r\n            mapperFilter.map(selectCountryLiveData.value!!)\r\n        } else {\r\n            null\r\n        }\r\n        if (selectRegionLiveData.value != null) area = mapperFilter.mapRegion(selectRegionLiveData.value!!)\r\n        if (selectCityLiveData.value != null) area = mapperFilter.mapCity(selectCityLiveData.value!!)\r\n        viewModelScope.launch { filterInteractor.savePlaceOfWork(country, area) }\r\n    }\r\n\r\n    fun selectCountry(country: CountryModel) {\r\n        setCityModel(null)\r\n        setRegionModel(null)\r\n\r\n    fun selectPlaceOfWork(country: CountryModel? = null, region: RegionModel? = null, sity: CityModel? = null) {\r\n        setCityModel(sity)\r\n        setRegionModel(region)\r\n\r\n        setCountryModel(country)\r\n    }\r\n    fun selectRegion(regionModel: RegionModel) {\r\n        var country: CountryModel? = null\r\n        areaList.forEach { if (it.regions.contains(regionModel)) country = it }\r\n        setCountryModel(country)\r\n        setRegionModel(regionModel)\r\n    }\r\n\r\n    fun selectCity(cityModel: CityModel) {\r\n        setCityModel(cityModel)\r\n    }\r\n    fun unSelectCountry() {\r\n        setCityModel(null)\r\n        setCountryModel(null)\r\n        setRegionModel(null)\r\n    }\r\n\r\n    fun selectCity(cityModel: CityModel) { setCityModel(cityModel) }\r\n\r\n    fun searchRegion(strRegion: String) {\r\n        if (strRegion.isNotEmpty()) {\r\n            val listRes = regionsList.filter { area ->\r\n                area.name.lowercase().contains(strRegion.lowercase())\r\n            }\r\n            if (listRes.isEmpty()) {\r\n                _regionsLiveData.postValue(RegionScreenState.ErrorNoRegion)\r\n            } else {\r\n                _regionsLiveData.postValue(RegionScreenState.Content(listRes))\r\n            }\r\n        } else {\r\n            _regionsLiveData.postValue(RegionScreenState.Content(regionsList))\r\n        }\r\n    }\r\n    fun searchCity(strCity: String) {\r\n        val listRes = cityList.filter { city ->\r\n            city.name.lowercase().contains(strCity.lowercase())\r\n        }\r\n        _cityLiveData.value = listRes\r\n    }\r\n    fun getRegions() {\r\n        val country = selectCountryLiveData.value\r\n        if (country == null) {\r\n            val list = mutableListOf<RegionModel>()\r\n            areaList.forEach { list.addAll(it.regions) }\r\n            regionsList = list\r\n            if (regionsList.isEmpty()) {\r\n                _regionsLiveData.postValue(RegionScreenState.ErrorNoList)\r\n            } else {\r\n                _regionsLiveData.postValue(RegionScreenState.Content(regionsList))\r\n            }\r\n        } else {\r\n            if (country.regions.isEmpty()) {\r\n                _regionsLiveData.postValue(RegionScreenState.ErrorNoList)\r\n            } else {\r\n                regionsList = country.regions\r\n                _regionsLiveData.postValue(RegionScreenState.Content(regionsList))\r\n            }\r\n        }\r\n    }\r\n    fun getCity() {\r\n        regionsList.forEach {\r\n            if (it.name == selectRegionLiveData.value?.name) {\r\n                cityList = it.city\r\n                _cityLiveData.value = it.city\r\n            }\r\n        }\r\n    }\r\n\r\n    fun selectIndustry(industryModel: IndustryModel?) {\r\n        _selectIndustryLiveData.postValue(industryModel)\r\n    }\r\n    fun unSelectIndustry() {\r\n        _selectIndustryLiveData.postValue(null)\r\n    }\r\n\r\n    fun searchIndustry(strIndustry: String) {\r\n        if (strIndustry.isNotEmpty()) {\r\n            val listRes = industryList.filter { industry ->\r\n                industry.name.lowercase().contains(strIndustry.lowercase())\r\n            }\r\n            if (listRes.isEmpty()) {\r\n                _industryLiveData.postValue(IndustryScreenState.ErrorContent)\r\n            } else {\r\n                _industryLiveData.postValue(IndustryScreenState.Content(listRes))\r\n            }\r\n        } else {\r\n            _industryLiveData.postValue(IndustryScreenState.Content(industryList))\r\n        }\r\n    }\r\n    fun saveIndustry() {\r\n        if (_selectIndustryLiveData.value != null) {\r\n            viewModelScope.launch {\r\n                filterInteractor.saveIndustries(mapperFilter.map(_selectIndustryLiveData.value!!))\r\n            }\r\n        } else {\r\n            deleteIndustries()\r\n        }\r\n    }\r\n\r\n    fun checkSelectedPlaceOfWork() {\r\n        if (isHaveSaveFilter) {\r\n            selectedAreaFromFilter(filterModel)\r\n            selectedRegionFromFilter(filterModel)\r\n            selectedCityFromFilter(filterModel)\r\n            isHaveSaveFilter = false\r\n        }\r\n    }\r\n\r\n    fun saveSelectedFromFilter(filterModel: FilterModel?) {\r\n        selectedAreaFromFilter(filterModel)\r\n        salaryBase = filterModel?.salary\r\n        doNotShowWithoutSalary = filterModel?.onlyWithSalary ?: false\r\n    }\r\n    private fun selectedAreaFromFilter(filterModel: FilterModel?) {\r\n        areaList.forEach {\r\n            if (it.id == filterModel?.country?.id) {\r\n                setCountryModel(it)\r\n            }\r\n        }\r\n        selectedRegionFromFilter(filterModel)\r\n    }\r\n    private fun selectedRegionFromFilter(filterModel: FilterModel?) {\r\n        selectCountryLiveData.value?.regions?.forEach {\r\n            selectedCityFromFilter(filterModel)\r\n            if (it.id == filterModel?.area?.id) {\r\n                setRegionModel(it)\r\n            }\r\n        }\r\n    }\r\n    private fun selectedCityFromFilter(filterModel: FilterModel?) {\r\n        areaList.forEach {\r\n            it.regions.forEach {\r\n                setCity(it.city, filterModel)\r\n            }\r\n        }\r\n    }\r\n    private fun setCity(cityModel: List<CityModel>, filterModel: FilterModel?) {\r\n        cityModel.forEach {\r\n            if (it.id == filterModel?.area?.id) {\r\n                setCityModel(it)\r\n                return\r\n            }\r\n        }\r\n    }\r\n    fun saveFilter(filterModel: FilterModel?) {\r\n        viewModelScope.launch(Dispatchers.IO) { filterInteractor.saveFilter(filterModel) }\r\n    }\r\n    fun getFilter() {\r\n        viewModelScope.launch {\r\n            filterInteractor.getIndustrias().collect() { res ->\r\n                when (res) {\r\n                    is Resource.Error -> _industryLiveData.postValue(IndustryScreenState.ErrorInternet)\r\n                    is Resource.Success -> {\r\n                        industryList = res.data\r\n                        _industryLiveData.postValue(IndustryScreenState.Content(industryList))\r\n                    }\r\n                }\r\n            }\r\n            filterInteractor.getAreas().collect { res ->\r\n                when (res) {\r\n                    is Resource.Error -> _areaLiveData.postValue(AreasScreenState.Error)\r\n                    else -> {\r\n                        areaList = (res as Resource.Success).data\r\n                        _areaLiveData.postValue(AreasScreenState.Content(res.data))\r\n                    }\r\n                }\r\n            }\r\n            filterInteractor.getFilter().collect { filter ->\r\n                _searchFilterLiveData.postValue(filter)\r\n                selectIndustry(getIndustriesModelFromFilter(filter?.industries))\r\n            }\r\n        }\r\n    }\r\n    fun deletePlaceOfWork() {\r\n        viewModelScope.launch {\r\n            filterInteractor.deletePlaceOfWork()\r\n        }\r\n    }\r\n    fun deleteIndustries() {\r\n        _selectIndustryLiveData.postValue(null)\r\n        viewModelScope.launch {\r\n            filterInteractor.deleteIndustries()\r\n        }\r\n    }\r\n=======\r\n\r\n    fun getIndustriesModelFromFilter(industry: IndustriesFilterModel?): IndustryModel? {\r\n        return if (industry != null) mapperFilter.map(industry) else null\r\n    }\r\n    fun saveCheckSalary(onlyWithSalary: Boolean) {\r\n        viewModelScope.launch { filterInteractor.saveCheckSalary(onlyWithSalary) }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/ru/practicum/android/diploma/presentation/viewmodel/FilterViewModel.kt b/app/src/main/java/ru/practicum/android/diploma/presentation/viewmodel/FilterViewModel.kt
--- a/app/src/main/java/ru/practicum/android/diploma/presentation/viewmodel/FilterViewModel.kt	(revision beeac469c2184af53d09f716eddee4377d5fedf4)
+++ b/app/src/main/java/ru/practicum/android/diploma/presentation/viewmodel/FilterViewModel.kt	(date 1727222027011)
@@ -286,7 +286,6 @@
             filterInteractor.deleteIndustries()
         }
     }
-=======
 
     fun getIndustriesModelFromFilter(industry: IndustriesFilterModel?): IndustryModel? {
         return if (industry != null) mapperFilter.map(industry) else null
